" ex系列插件, 工程管理 {{{
Plug 'DaSea/ex-config'
" Fork 'exvim/ex-config', change '.exvim.project_name' to '.exvim'
" ---------------------------------------------------
nnoremap <unique> <Leader>ve :call exconfig#edit_cur_vimentry ()<CR>

Plug 'exvim/ex-aftercolors'
" ---------------------------------------------------

Plug 'DaSea/ex-vimentry'
"Fork 'exvim/ex-vimentry', and change default template
" ---------------------------------------------------

Plug 'exvim/ex-project'
" ---------------------------------------------------
let g:ex_project_winpos='left'
let g:ex_project_winsize=28
let g:ex_project_winsize_zoom=40
nnoremap <unique> <silent> <F3> :EXProjectToggle<CR>
nnoremap <unique> <silent> <Leader>pf :EXProjectFind<CR>
autocmd FileType exproject noremap <buffer> q :EXProjectClose<CR>

Plug 'exvim/ex-gsearch'
" ---------------------------------------------------
let g:ex_gsearch_ignore_case = 0
function! ExgsearchInit() abort "{{{
    call exgsearch#register_hotkey( 100, 0, '<Leader>gs', ":EXGSearchToggle<CR>", 'Toggle global search window.' )
    call exgsearch#register_hotkey( 101, 0, '<Leader>gg', ":EXGSearchCWord<CR>", 'Search current word.' )
    call exgsearch#register_hotkey( 102, 0, '<Leader><S-f>', ":GS ", 'Shortcut for :GS' )
    call exgsearch#register_hotkey( 2, 1, 'q', ":EXGSearchClose<CR>" , 'Close window.')
endfunction "}}}
call add(g:init_func_list, function('ExgsearchInit'))

Plug 'exvim/ex-tags'
" ---------------------------------------------------
function! ExtagsInit() abort "{{{
    call extags#register_hotkey( 100, 0, '<Leader>ts', ":EXTagsToggle<CR>", 'Toggle tag select window.' )
    call extags#register_hotkey( 101, 0, '<Leader>]', ":EXTagsCWord<CR>", 'Tag select current word.' )
    call extags#register_hotkey( 2  , 1, 'q', ":EXTagsClose<CR>", 'Close window.' )
    " DISABLE: nnoremap <unique> <Leader>] :exec 'ts ' . expand('<cword>')<CR>
endfunction "}}}
call add(g:init_func_list, function('ExtagsInit'))

Plug 'exvim/ex-symbol'
" ---------------------------------------------------
function! Exsymbol() abort "{{{
    call exsymbol#register_hotkey( 100, 0, '<Leader>ss', ":EXSymbolList<CR>", 'List all symbols.' )
    call exsymbol#register_hotkey( 101, 0, '<Leader>sq', ":EXSymbolOpen<CR>", 'Open symbols window.' )
    call exsymbol#register_hotkey( 102, 0, '<Leader>sg', ":EXSymbolCWord<CR>", 'List symbols contains current word.' )

    if g:isGUI
        if g:ismac
            call exsymbol#register_hotkey( 102, 0, 'Ò', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        else
            call exsymbol#register_hotkey( 102, 0, '<M-L>', ":EXSymbolList<CR>:redraw<CR>/", 'List all symbols and stay in search mode.' )
        endif
    endif
endfunction "}}}
call add(g:init_func_list, function('Exsymbol'))
let g:ex_symbol_select_cmd = 'TS'

Plug 'exvim/ex-cscope'
" ---------------------------------------------------
function! Excscope() abort "{{{
    call excscope#register_hotkey( 100, 0, '<Leader>cd', ":EXCSToggle<CR>", 'Toggle cscope window.' )
endfunction "}}}
call add(g:init_func_list, function('Excscope'))

Plug 'exvim/ex-qfix'
" ---------------------------------------------------
function! Exqfix() abort "{{{
    call exqfix#register_hotkey( 100, 0, '<Leader>qf', ":EXQFixToggle<CR>", 'Toggle quickfix window.' )
    call exqfix#register_hotkey( 101, 0, '<Leader>qq', ":EXQFixPaste<CR>", 'Open quickfix window and paste error list from register *.' )
endfunction "}}}
call add(g:init_func_list, function('Exqfix'))

" Plug 'exvim/ex-hierarchy'
" 生成继承关系图
" ---------------------------------------------------
" nnoremap <unique> <Leader>hv :EXHierarchyCWord<CR>

" Plug 'exvim/ex-visincr'
" ex-visincr: invoke when select text and type ':II'
" ---------------------------------------------------

Plug 'exvim/ex-searchcompl', {'for': 'exvim'}
" invoke by /
" ---------------------------------------------------
" }}}
