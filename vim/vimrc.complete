" 设置弹出的补全菜单的个数
set pumheight=15

if 'yes' ==? g:setting.auto_paramcomplete
    Plug 'tenfyzhong/CompleteParameter.vim' " 函数参数补全{{{
    inoremap <silent><expr> ( cmp#pre_complete("(")
    nnoremap <c-j> <Plug>(complete_parameter#goto_next_parameter)
    smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
    imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
    nnoremap <c-h> <Plug>(complete_parameter#goto_previous_parameter)
    smap <c-h> <Plug>(complete_parameter#goto_previous_parameter)
    imap <c-h> <Plug>(complete_parameter#goto_previous_parameter)
    " 重载函数的时候使用
    nnoremap <m-d> <Plug>(complete_parameter#overload_down)
    imap <m-d> <Plug>(complete_parameter#overload_down)
    smap <m-d> <Plug>(complete_parameter#overload_down)
    nnoremap <m-u> <Plug>(complete_parameter#overload_up)
    imap <m-u> <Plug>(complete_parameter#overload_up)
    smap <m-u> <Plug>(complete_parameter#overload_up)
    " 在命令行显示函数原形
    " set noshowmode
    " set cmdheight=2
    let g:complete_parameter_echo_signature=0
endif
" }}}

if g:isNvim
    let g:hasNeocomplete = 1
    Plug 'Shougo/deoplete.nvim', {'do': ':UpdateRemotePlugins'} " {{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#enable_smart_case=1
    let g:deoplete#max_list=30
    let g:deoplete#auto_completion_start_length=2
    let g:deoplete#delimiters = ['/', '.', '::', ':', '#', '->']
    let g:deoplete#skip_chars = ['(', ')']
    if !exists('g:deoplete#sources')
        let g:deoplete#sources = {}
    endif
    let g:deoplete#sources._ = ['buffer', 'neosnippet', 'file/include']
    let g:deoplete#ignore_sources = ['tag']
    " debug
    " let g:deoplete#enable_profile=1
    " omni function
    " let g:deoplete#omni#input_patterns={}
    " let g:deoplete#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
    " let g:deoplete#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
    " let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
    " let g:deoplete#omni#input_patterns.php =  '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
    " let g:deoplete#omni#input_patterns.go = '[^. *\t]\.\w*'
    " keymap
    inoremap <silent><expr> <TAB>
                \ pumvisible() ? "\<C-n>" :
                \ <SID>check_back_space() ? "\<TAB>" :
                \ deoplete#mappings#manual_complete()
    inoremap <expr><C-h>
                \ deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>
                \ deoplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-g>    deoplete#undo_completion()
    inoremap <expr><C-l>    deoplete#refresh()
    function! s:check_back_space() abort "{{{
        let col = col('.') - 1
        let lastChar = getline('.')[col-1]
        let invalid = 0
        if lastChar =~ '\s'
            let invalid = 1
        elseif (-1 == index(g:deoplete#delimiters, lastChar))
            let invalid = 1
        endif
        return !col || invalid
    endfunction"}}}

    " Initial {{{
    function! DeopleteInit() abort
        " Use head matcher instead of fuzzy matcher
        call deoplete#custom#set('_', 'matchers', ['matcher_head'])

        " debug
        " call deoplete#enable_logging('DEBUG', 'deoplete.log')
        " call deoplete#custom#set('jdei', 'debug_enabled', 1)
        " call deoplete#custom#set('clang', 'debug_enabled', 1)
    endfunction " }}}
    call add(g:init_func_list, function('DeopleteInit'))
    "}}}
else
    let g:hasNeocomplete = 0
    if  has('python3') || has('python')
        Plug 'Valloric/YouCompleteMe' " {{{
        if g:iswindows
            let g:ycm_python_binary_path = 'python3'
        else
            let g:ycm_python_binary_path = 'python'
        endif
        let g:ycm_confirm_extra_conf = 0
        let g:ycm_show_diagnostics_ui = 0
        let g:ycm_use_ultisnips_completer=1
        let g:ycm_goto_buffer_command='vertical-spit'
        let g:ycm_log_level='error'
        let g:ycm_echo_current_diagnostic = 1
        let g:ycm_echo_current_error = 1
        let g:ycm_min_num_of_chars_for_completion = 3
        let g:ycm_filetype_blacklist = {
                    \ 'tagbar' : 1,
                    \ 'qf' : 1,
                    \ 'unite' : 1,
                    \ 'denite': 1,
                    \ 'infolog' : 1,
                    \ 'mail' : 1
                    \}
        let g:ycm_semantic_triggers = {
                    \ 'c' : ['->', ' ', '.', ' ', '(', '[', '&'],
                    \ 'cpp,objcpp' : ['->', '.', ' ', '(', '[', '&', '::'],
                    \ 'perl' : ['->', '::', ' '],
                    \ 'php' : ['->', '::', '.'],
                    \ 'cs,java,javascript,d,vim,python,perl6,scala,vb,elixir,go' : ['.'],
                    \ 'ruby' : ['.', '::'],
                    \ 'lua' : ['.', ':']
                    \ }
        if g:iswindows
            let g:ycm_global_ycm_extra_conf = $VIM.'/.ycm_extra_conf.py'
        else
            let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
        endif

        " 按键定义
        nnoremap sj :YcmCompleter GoTo<CR>
        nnoremap sk :YcmCompleter GoToImprecise<CR>
        " map <Leader>yY :YcmDiags<cr>
        " map <Leader>yy :YcmForceCompileAndDiagnostics<cr>
        " map <Leader>ys :YcmShowDetailedDiagnostic<cr>
        " map <Leader>yt :YcmCompleter GetType<cr>

        " 状态栏错误集成
        " if g:setting.status_line ==? 'airline'
            " call add(g:airline_extensions, 'ycm')
        " endif
        " }}}

        Plug 'SirVer/ultisnips' " snippets {{{
        let g:UltiSnipsUsePythonVersion = 3
        let g:UltiSnipsSnippetsDir=g:setting.private_snippets.'/ultisnips'
        let g:UltiSnipsSnippetDirectories = [g:setting.private_snippets.'/ultisnips/']
        let g:UltiSnipsEnableSnipMate=0
        let g:UltiSnipsEditSplit="vertical"
        let g:UltiSnipsExpandTrigger="<C-k>"
        let g:UltiSnipsJumpForwardTrigger="<C-k>"
        let g:UltiSnipsJumpBackwardTrigger="<C-j>"
        " 编辑snippet
        nnoremap <leader>ns :UltiSnipsEdit<CR>
        " }}}
    elseif has('lua')
        Plug 'Shougo/neocomplete.vim' "{{{
        let g:hasNeocomplete = 1
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0
        " Use neocomplete.
        let g:neocomplete#enable_at_startup = 1
        " Use smartcase.
        let g:neocomplete#enable_smart_case = 1
        let g:neocomplete#enable_camel_case = 1
        let g:neocomplete#max_list = 20
        " Set minimum syntax keyword length.
        let g:neocomplete#sources#syntax#min_keyword_length = 3
        let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
        " Define dictionary.
        let g:neocomplete#sources#dictionary#dictionaries = {
                    \ 'default' : ''
                    \ }
        "  'java' : '~/.vim/dict/java.dict',
        " \ 'ruby' : '~/.vim/dict/ruby.dict',
        " \ 'scala' : '~/.vim/dict/scala.dict',
        " Define keyword.
        if !exists('g:neocomplete#keyword_patterns')
            let g:neocomplete#keyword_patterns = {}
        endif
        let g:neocomplete#keyword_patterns['default'] = '\h\w*'
        " Plug key-mappings.
        inoremap <expr><C-g>     neocomplete#undo_completion()
        inoremap <expr><C-l>     neocomplete#complete_common_string()

        " <TAB>: completion.
        " SuperTab like snippets behavior.
        inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
        " <S-TAB>: completion back.
        inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
                    \ "\<Plug>(neosnippet_expand_or_jump)" :
                    \ "\<TAB>"

        " <C-h>, <BS>: close popup and delete backword char.
        inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
        inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
        " Close popup by <Space>.
        "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

        " let g:neocomplete#force_overwrite_completefunc = 1
        " Enable omni completion.
        " autocmd FileType c,cpp setlocal omnifunc=omni#cpp#complete#Main
        " autocmd FileType go setlocal omnifunc=gocode#Complete
        " autocmd FileType php set omnifunc=phpcomplete#CompletePHP

        " Enable heavy omni completion.
        if !exists('g:neocomplete#force_omni_input_patterns')
            let g:neocomplete#force_omni_input_patterns = {}
        endif
        " for c and c++
        let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
        let g:neocomplete#force_omni_input_patterns.php =  '\h\w*\|[^. \t]->\%(\h\w*\)\?\|\h\w*::\%(\h\w*\)\?'
        " if !exists('g:neocomplete#sources#omni#input_patterns')
        " let g:neocomplete#sources#omni#input_patterns = {}
        " endif
        " for c and c++
        " let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
        " let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
        "}}}
    endif
endif

if g:hasNeocomplete
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
        return (pumvisible() ? deoplete#close_popup() : "\<CR>")
        " return deoplete#close_popup() . "\<CR>"
    endfunction
else
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function() abort
        return (pumvisible() ? "\<C-y>" : "\<CR>")
    endfunction
endif

if g:hasNeocomplete
    function! SetCppPath() abort "{{{
        let files = split(glob('/usr/include/c++/6/*'), '\n')
                    \ + split(glob('/usr/include/x86_64-linux-gnu/qt5/*'), '\n')
        call filter(files, 'isdirectory(v:val)')

        " Add cpp path.
        let g:neoinclude#paths['cpp'] = '.,' . join(files, ',')
        let g:neoinclude#_paths['cpp'] = '.,' . join(files, ',')
    endfunction"}}}
    Plug 'Shougo/neoinclude.vim' "{{{
    " disable ctags
    " let g:neoinclude#ctags_command = ''
    " 字典,设置路径
    if !exists('g:neoinclude#paths')
        let g:neoinclude#paths = {}
    endif
    if !exists('g:neoinclude#_paths')
        let g:neoinclude#_paths = {}
    endif
    if g:iswindows
        let g:neoinclude#paths = {
                    \ 'cpp': 'D:/Develop/Java/android-ndk-r10/platforms/android-19/arch-arm/usr/include'
                    \ }
    else
        call SetCppPath()
    endif
    " if !exists('g:neoinclude#_exts')
        " let g:neoinclude#_exts = {}
    " endif
    " let g:neoinclude#_exts.cpp = ['', 'h', 'hpp', 'hxx']
    " let g:neoinclude#_exts.python = ['py', 'py3'];
    "}}}

    Plug 'Shougo/neosnippet.vim' "{{{
    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }
    let g:neosnippet#snippets_directory=g:setting.private_snippets
    let g:neosnippet#enable_complete_done = 1
    let g:neosnippet#enable_conceal_markers = 0
    let g:neosnippet#disable_select_mode_mappings=0
    let g:neosnippet#enable_completed_snippet=1
    " 主要防止自定义snippet与neosnippet的冲突
    let g:neosnippet#disable_runtime_snippets = {
                \   '_' : 1,
                \ }
    " let g:neosnippet#enable_snipmate_compatibility=1
    " Plug key-mappings.
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    " 编辑snippet
    nnoremap <leader>ns :execute ":NeoSnippetEdit ".&filetype<CR>
    "}}}
endif
" vim:ts=4:sw=4:sts=4 et fdm=marker:
