priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

###########################################################################
#                            Me add Snippets                            #
###########################################################################

snippet pub_func_group
/*****************************************************************************************
 * public function group
 *****************************************************************************************/
${0}
endsnippet

snippet pri_func_group
/*****************************************************************************************
 * private function group
 *****************************************************************************************/
${0}
endsnippet

snippet extern_c
#ifdef __cplusplus
extern "C" {
#endif

${0}

#ifdef __cplusplus
}
#endif
endsnippet

snippet new_var "new var;"
${1:#:type} ${2} = new $1(${3});
${0}
endsnippet

snippet new_arr "new arr[];"
${1:#:type} ${2} = new $1[${3}];
${0}
endsnippet

snippet del_var "delete var;"
delete ${1};
$1 = NULL;
${0}
endsnippet

snippet del_arr "delete[] var;"
delete[] ${1};
$1 = NULL;
${0}
endsnippet

snippet class_constructor "class::class{}"
${1:class}::$1(${2:param}){
	${0:/* Constructor */}
}
endsnippet

snippet class_desturctor "class::~class{}"
${1:class}::~$1(){
	${0:/* Destructor */}
}
endsnippet

snippet func_class_ipt "class::func() {}"
${1:void} ${2:#:class_name}::${3:#:func_name}(${4:void}) {
	${0:TARGET}
}
endsnippet

snippet try "try{}catch(){}"
try {
	${1:#:TARGET}
} catch (${2:...}) {
	${3}
}
$0
endsnippet

# range based for ( C++11 feature )
snippet for_CPP11 "for(:) {}"
for (${1:auto&& }${2:var} : ${3:container}) {
	${0:TARGET}
}
endsnippet

snippet for_auto "for(:) {}"
for (auto ${1:#:it} = ${2:#:var}.begin(); $1 != $2.end(); ++$1) {
	${0:TARGET}
}
endsnippet

snippet for_inter "for(it: != end;++it) {}"
std::${1:#:vector}<${2:#:int}>::iterator ${4:#:it} = ${3:#:var}.begin();
for (; $4 != $3.end(); ++$4) {
	${0:TARGET}
}
endsnippet

# lambda expression ( C++11 feature )
snippet lambda "[](){}"
[${1}](${2})${3}{ ${4:TARGET} }${0:;}
endsnippet

snippet cast_static "static_cast<>()"
static_cast<${1}>(${2})${0}
endsnippet

snippet cast_reinterpret "reinterpret_cast<>()"
reinterpret_cast<${1}>(${2})${0}
endsnippet

snippet cast_const "const_cast<>()"
const_cast<${1}>(${2})${0}
endsnippet

snippet   cast_dynamic "dynamic_cast<>()"
dynamic_cast<${1}>(${2})${0}
endsnippet

snippet helloworld "#include<iostream> int main..."
#include <iostream>

int main(int argc, char const* argv[])
{
	${0:std::cout << "${1:hello, world!}" << std::endl;}
	return 0;
}
endsnippet

snippet coutend "std::cout<<hello<<endl"
    std::cout << ${0:TARGET} << std::endl;
endsnippet

##############################################################################
# comment
snippet br_base "@brief"
/**
 * @brief ${0:discreption}
 */
endsnippet

snippet br_mem "struct_mem"
/** ${0:join you!} */
endsnippet

# vim:ft=snippets:
