" 存放于语言相关的配置, 如果为语法高亮和相关的补全等
" 生成tags {{{
Plug 'jsfaint/gen_tags.vim', {'on': ['GenCtags', 'GenGTAGS']}
" let g:gen_tags#ctags_opts = []
let g:gen_tags#ctags_use_cache_dir=1
let g:gen_tags#ctags_auto_gen=0
let g:gen_tags#gtags_auto_gen=0
" }}}

Plug 'DaSea/vim-syntax' " 杂7杂8的, 有qml, 有cpp文件中的doxygen, ndk高亮等{{{
let g:ds_ndk_syntax_enable = 1
let g:ds_doxygen_syntax_enable = 1
let g:ds_opengl_syntax_enable = 0
"}}}

" 打开文件资源管理器, 并选择当前文件 {{{
function! QuickBrowFileInExpolorer() abort 
    let reviewfile = expand("%:p")
    if g:iswindows
        exec "silent !start explorer.exe /e,/select," . reviewfile
    else
        call system('dde-file-manager -d --show-item ' . reviewfile)
    endif
endfunction
nnoremap <Leader>of :call QuickBrowFileInExpolorer()<CR>
"}}}

" markdown支持 {{{
if index(g:language_group, 'markdown') >= 0
    Plug 'godlygeek/tabular', {'on': 'Tabularize'}
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    let g:vim_markdown_folding_disabled=0
    let g:vim_markdown_folding_style_pythonic=1
    let g:vim_markdown_emphasis_multiline=90
    let g:vim_markdown_conceal=0
    let g:vim_markdown_new_list_item_indent = 2

    " 增加在浏览器中打开当前编辑的文件, 预览markdown, 浏览器安装markdown的viewer插件
    function! MeMarkdownPreview() abort
        let reviewfile = expand("%:p")
        if g:iswindows
            let global_browser = 'D:/Develop/Mozilla Firefox/firefox.exe'
            exec "silent !start " . global_browser . ' ' . reviewfile
        else
            let global_browser = '/opt/firefox/firefox'
            call system(global_browser . ' ' . reviewfile)
        endif
    endfunction
    nnoremap <silent> <Leader>mp :call MeMarkdownPreview()<CR>
endif
"}}}

" 好玩的东西, Plantuml{{{
if (index(g:language_group, 'plantuml') >= 0)
    augroup plantuml
        au!
        if g:iswindows
            au BufNewFile,BufRead *.plantuml set fileencoding=cp936
            au BufNewFile,BufRead *.uml set fileencoding=cp936
        endif
    augroup END
    Plug 'aklt/plantuml-syntax',{'for': 'plantuml'}
    Plug 'scrooloose/vim-slumlord',{'for': 'plantuml'}
    " 详细的可以参考http://plantuml.com/
    let g:slumlord_au_created = 0
    nnoremap <silent> <Leader>um :call slumlord#updatePreview({'write': 1})<CR>
    function! UmlToImage() abort " 由uml等生成图片 {{{
        let cur_uml = expand('%:p')
        let cmd = 'java -jar ' . g:plantuml_jar_path . ' ' . cur_uml
        call system(cmd)
    endfunction " }}}
    nnoremap <silent> <Leader>up :call UmlToImage()<CR>
endif
" }}}

" vim 补全{{{
if (index(g:language_group, 'vim') >= 0) && g:hasNeocomplete
    Plug 'Shougo/neco-vim'
    if g:hasNeocomplete
        if !exists('g:deoplete#sources')
            let g:deoplete#sources = {}
        endif
        let g:deoplete#sources.vim = ['buffer', 'neosnippet', 'file/include', 'vim']
    else
        let g:ycm_semantic_triggers = get( g:,'ycm_semantic_triggers', {} )
        let g:ycm_semantic_triggers.vim = ['$', '&', 're![\w&$<-][\w:#<>-]*']
    endif
endif
"}}}

" cpp/c等{{{
if index(g:language_group, 'cpp') >= 0
    Plug 'DaSea/ex-avim',{'on': ['A', 'AV', 'AS']} " h与cpp文件的交换{{{
    " 用于切换C/C++头文件
    " :A     ---切换头文件并独占整个窗口
    " :AV    ---切换头文件并垂直分割窗口
    " :AS    ---切换头文件并水平分割窗口
    " let g:alternateSearchPath = "D:\\Develop\\msys64\\mingw64\\include\\c++\\5.4.0"
    if g:iswindows
        let g:alternateSearchPath =
                    \ "D:\\Develop\\Java\\android-ndk-r11b\\sources\\cxx-stl\\gnu-libstdc++\\4.9\\include"
    else
        let g:alternateSearchPath = "/usr/include/c++/6"
    endif
    nnoremap <silent> <leader>ah :A<CR>
    nnoremap <silent> <leader>av :AV<CR>
    nnoremap <silent> <leader>as :AS<CR>
    "}}}

    Plug 'octol/vim-cpp-enhanced-highlight'
    let c_no_curly_error=1
    let g:cpp_class_scope_highlight = 1
    let g:cpp_class_decl_hightlight = 1
    " let g:cpp_experimental_simple_template_highlight = 1

    if g:isNvim
        Plug 'arakashic/chromatica.nvim' " 语法高亮 {{{
        let g:chromatica#enable_at_startup=1
        let g:chromatica#libclang_path='/usr/lib/llvm-3.8/lib'
        " }}}

        Plug 'zchee/deoplete-clang', {'do': ':UpdateRemotePlugins'} " {{{
        if isdirectory('/usr/lib/llvm-4.0')
            let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-4.0/lib/libclang.so.1'
            let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-4.0/lib/clang'
        else
            let g:deoplete#sources#clang#libclang_path='/usr/lib/llvm-3.8/lib/libclang.so.1'
            let g:deoplete#sources#clang#clang_header = '/usr/lib/llvm-3.8/lib/clang'
        endif
        let g:deoplete#sources#clang#std={'c': 'c11', 'cpp': 'c++1z', 'objc': 'c11', 'objcpp': 'c++1z'}
        " 补全列表的顺序(priority, alphabetical) 默认使用deoplete.nvim的算法
        " let g:deoplete#sources#clang#sort_algo = 'priority'
        " 
        " let g:deoplete#sources#clang#clang_complete_database=$HOME.'/src/github.com/neovim/neovim/build'
        if !exists('g:deoplete#sources')
            let g:deoplete#sources = {}
        endif
        let g:deoplete#sources.c = ['buffer', 'neosnippet', 'file/include', 'clang']
        let g:deoplete#sources.cpp = ['buffer', 'neosnippet', 'file/include', 'clang']
        " echo | clang -v -E -x c -
        let g:deoplete#sources#clang#flags = [
                    \ "-O3", "-cc1", "-x", "c++", "-std=c++11",
                    \'-isystem',
                    \ '/usr/include',
                    \ '-isystem',
                    \ '/usr/include/c++/6',
                    \ '-isystem',
                    \ '/usr/include/x86_64-linux-gnu/qt5/QtWidgets',
                    \ '-isystem',
                    \ '/usr/include/x86_64-linux-gnu/qt5/QtGui',
                    \ '-isystem',
                    \ '/usr/include/x86_64-linux-gnu/qt5/QtCore',
                    \ '-isystem',
                    \ '/usr/include/x86_64-linux-gnu/qt5/QtNetwork',
                    \ '-I',
                    \ '.'
                    \ ]

        " TODO: 对于ndk需要
        "-I/home/Feng/java/jdk1.8.0/include",
        "-I/mnt/D/Develop/Java/android-ndk-r10/platforms/android-12/arch-arm/usr/include"
        " }}}
    endif
endif
"}}}

" python{{{
if (index(g:language_group, 'python') >= 0) && g:isNvim
    Plug 'zchee/deoplete-jedi', {'do': ':UpdateRemotePlugins'}
    let g:deoplete#sources#jedi#python_path='/usr/bin/python3'  "~/.pyenv/versions/3.4.5/envs/neovim/bin/python'
    " let g:python3_host_prog = '/home/Feng/.pyenv/versions/3.4.5/envs/neovim/bin/python'
    " let g:deoplete#ignore_sources = {}
    " let g:deoplete#ignore_sources.python =
                " \ ['buffer', 'dictionary', 'tag', 'syntax', 'neosnippet']
    if !exists('g:deoplete#sources')
        let g:deoplete#sources = {}
    endif
    let g:deoplete#sources.python = ['buffer', 'neosnippet', 'file/include', 'jedi']
    let g:deoplete#sources#jedi#statement_length = 0
    let g:deoplete#sources#jedi#enable_cache = 1
    let g:deoplete#sources#jedi#short_types = 1
    let g:deoplete#sources#jedi#show_docstring = 0
    let g:deoplete#sources#jedi#debug_enabled = 0
elseif (index(g:language_group, 'python') >= 0) && g:hasNeocomplete
    " 对于ycm 来说, 不需要此插件
    Plug 'davidhalter/jedi-vim',{'for': 'python'}
    let g:jedi#auto_vim_configuration=0
    let g:jedi#popup_select_first=0
endif
"}}}

" go{{{
if (index(g:language_group, 'go') >= 0) && g:isNvim
    Plug 'zchee/deoplete-go', {'do': ':UpdateRemotePlugins'}
    let g:deoplete#sources#go#gocode_binary = $GOBIN.'/gocode'
    let g:deoplete#sources#go#align_class=1
    let g:deoplete#sources#go#package_dot=1
    let g:deoplete#sources#go#sort_class=['package', 'func', 'type', 'var', 'const']
    let g:deoplete#sources#go#use_cache=1
    let g:deoplete#sources#go#json_directory='/home/seasea/.vim/plugged/deoplete-go/data/json/1.8.3/linux_amd64'
    let g:deoplete#sources.go = ['buffer', 'neosnippet', 'file/include', 'go']
endif
"}}}

"  Php自动补全{{{
if index(g:language_group, 'php') >= 0
" Plug 'shawncplus/phpcomplete.vim',{'for': 'php'}
" Plug '2072/PHP-Indenting-for-VIm',{'for': 'php'}
" Plug 'StanAngeloff/php.vim',{'for': 'php'}
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP
endif
" }}}

" lua 相关{{{
if index(g:language_group, 'lua') >= 0
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-lua-ftplugin'
    let g:lua_check_syntax = 0
    let g:lua_complete_omni = 1
    let g:lua_complete_dynamic = 0
    let g:lua_define_completion_mappings = 0
    if g:isNvim
        if !exists('g:deoplete#omni#input_patterns')
            let g:deoplete#omni#input_patterns = {}
        endif
        let g:deoplete#omni#input_patterns.lua = '\w+|[^. *\t][.:]\w*'

        if !exists('g:deoplete#omni#functions')
            let g:deoplete#omni#functions = {}
        endif
        let g:deoplete#omni#functions.lua = 'xolox#lua#omnifunc'
    endif
endif
"}}}

" WIKI, org{{{
if index(g:language_group, 'org') >= 0
    Plug 'jceb/vim-orgmode', {'for': 'org'}
    " Plug 'vim-scripts/utl.vim'  org{{{
    " 快捷键记录:
    " <leader>hn <leader>hh, <leader>hN:插入标题
    " yah , dah : 复制和删除heading, yar, dar: 复制和删除subtree
    " >> << 可以升降heading的等级; >ar <ar : 可以升降subtree的等级
    " <leader>cl , <leader>CL 插入plainlist, \cn,\cc,\cN:切换,插入checkbox
    " \si, \sa : 插入时间;  \ct: TODO 之间切换状态; \st,\ft: tag
    autocmd FileType org let maplocalleader="<"

    " 配置
    " let g:org_todo_keywords=['TODO', 'VERIFY', '|', 'DONE', 'DELEGATED']
    if g:iswindows
        let g:org_agenda_files = ['E:/Self/01_mywiki/gtd/gtd.org']
    else
        let g:org_agenda_files = ['/media/work/Self/01_mywiki/gtd/gtd.org']
    endif
    " 打开todo文件
    nnoremap <leader>oo :call OpenOrgToDoFile()<CR>
    function! OpenOrgToDoFile() abort "{{{
        let gtdFile = g:org_agenda_files[0]
        silent! execute 'edit! ' . gtdFile
    endfunction " }}}
    " }}}
endif
"}}}

" 一个简单的添加笔记，浏览笔记的插件{{{
Plug 'DaSea/SimpleMdNote.vim'
if g:iswindows
    let g:simplemdnote_draft_path = "E:/Self/01_mywiki/dasea.github.io/source/_drafts"
    let g:simplemdnote_posts_path = "E:/Self/01_mywiki/dasea.github.io/source/_posts"
else
    let g:simplemdnote_draft_path="/media/work/Self/01_mywiki/dasea.github.io/source/_drafts"
    let g:simplemdnote_posts_path="/media/work/Self/01_mywiki/dasea.github.io/source/_posts"
endif
nnoremap <Leader>sp :silent SNNewPostsNote<CR>
nnoremap <Leader>sd :silent SNNewDraftNote<CR>
nnoremap <Leader>pn :silent SNPublishNote<CR>
nnoremap <Leader>sl :silent SNListNote<CR>
" }}}

" 自己写的用于控制音乐切换的小插件 {{{
Plug 'DaSea/SimpleMusicCtrl.vim'
" SMCNext SMCPlay SMCPrev
" }}}

" vim:ts=4:sw=4:sts=4 et fdm=marker:

